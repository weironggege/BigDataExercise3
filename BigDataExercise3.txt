1.
分布式文件系统的设计需求：
设计目标主要包括：透明性、并发控制、可伸缩性、容错性以及安全需求等

2.
分布式文件系统把文件分布存储到多个计算机节点上，成千上万的计算机节点构成了计算机集群

3.
HDFS在块的大小的设计上明显要大于普通文件系统

4.
在HDFS中，名称节点负责管理分布式文件系统的命名空间，保存了两个核心的数据结构
数据节点是分布式文件系统的工作节点，负责数据的存储和读取

5.
HDFS集群中只有唯一一个名称节点，该节点负责所有元数据的控制，这种结构大大简化了分布式文件系统的机构，大大减轻了中心服务器的负担，方便数据管理

6.
HDFS体系机构的局限性：
命名空间的限制， 性能的瓶颈， 隔离问题， 集群的可用性

7.
数据冗余保存策略：
1). 在集群内发起写操作请求， 把第第一个副本放置在发起写操作请求的数据节点上
2). 第二个副本会被放置与第一个副本不同的机架的数据节点上
3). 第三个副本会被放置在与第一个副本相同的机架的其他节点上
4). 如果还有更多的副本，则继续从集群中随机选择数据节点进行存放

8.
当客户端要往HDFS中写入一个文件时，这个文件会被首先写入本地，并被切分成若干块。。。

9.
1). 名称节点出错：放到第二名称节点上进行恢复，并把第二名称节点作为名称节点来使用
2). 数据节点出错： 数据节点的不可用，导致一些数据块的副本数量小于冗余因子，就会启动数据冗余复制生成新的副本
2). 数据出错： 读取信息文件对每个读取的数据块进行校验，如果校验出错，客户端就会请求到另一个数据节点读取该文件块，名称节点会定期检查并且重新复制这个块

10.
HDFS读数据的过程：
1). 客户端通过FileSystem.open()打开文件
2). 远程调用名称节点，获取文件开始部分数据块的保存位置
3). 获取输入流，客户端调用read函数开始读取数据
4). 数据从该数据节点读取到客户端
5). 输入流通过getBlockLocations方法查找下一个数据块
6). 找到数据块的最佳数据节点，读取数据
7). 当客户端读取数据完毕后，关闭输入流

11.
HDFS写数据的过程
1). 客户端通过FileSystem.create穿件文件
2). 远程调用名称节点，在文件系统的命名空间中创建一个新的文件
3). 获得输出流后， 调用write方法向HDFS中对应的文件中写入数据
4). 客户端向输入流中写入的数据会被分成一个个的分包
5). 数据节点位于不同的机器上，数据需要通过网络发送
6). 客户端关闭输入流